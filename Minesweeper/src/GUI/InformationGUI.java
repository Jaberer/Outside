/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
//import java.util.Timer;
import javax.swing.Timer;
import javax.swing.JFrame;

/**
  *  Joseph Zhong
 *  Arcade - Java (v3)
 *  This program is the Information GUI Object for my overall Arcade Project
 *  Arcade - Information GUI Object
 *  1 April 2014
 */
public class InformationGUI extends JFrame implements ActionListener
{

    /**
     * secondsLabel is the label which contains the seconds
     */
    private java.awt.Label secondsLabel;

    /**
     * minesLabel is the label which contains the mines left to mark
     */
    private java.awt.Label minesLabel;

    // End of variables declaration
    /**
     * Minute int.
     * Used for separating seconds and minutes.
     * Not yet implemented.
     */
    //private final int minute = 60;

    /**
     * ClockListener Object.
     * Used to track second ticks.
     */
    private ClockListener clockListener;

    /**
     * Timer Object.
     * Used for displaying seconds lapsed.
     */
    private final Timer timerObject;


    /**
     * Integer.
     * Keeps track of seconds lapsed.
     */
    private int seconds;

    /**
     * Integer.
     * Keeps track of Mines.
     */
    private int mineCount;

    public InformationGUI()
    {
        initComponents();
        clockListener = new ClockListener();
        timerObject = new Timer(1000, clockListener);
        timerObject.setInitialDelay(0);

        //main(null);
        /*
        t = new Timer();
        sdf = new SimpleDateFormat("hh:mm:ss");
        start = new Date();
        */
        this.setLocation(300, 550);
        setVisible(true);
    }

    @Override
    /**
     * ActionListener method.
     * Listens for any events performed
     * Mainly for tracking seconds lapsed.
     * @param e is any ActionEvent.
     */
    public void actionPerformed(ActionEvent e)
    {
        //throw new UnsupportedOperationException("Not supported yet.");
        //seconds %= minute;
        secondsLabel.setText(String.valueOf(seconds));
        seconds++;
    }

    /**
     * Nested Class ClockListener.
     * This class implements ActionListener and updates the seconds label based
     *  on the clock ticks.
     */
    private class ClockListener implements ActionListener
    {
        /**
         * secondsCounter is an integer resembling seconds passed thus far.
         */
        private int secondsCounter = 0;

        @Override
        public void actionPerformed(ActionEvent e)
        {
            //count %= minute;
            secondsLabel.setText(String.valueOf(secondsCounter));
            secondsCounter++;
        }

        public void resetCounter()
        {
            secondsCounter = 0;
        }
    }// end clock class

    /**
     * Helper method.
     * This method is called outside to start the clock.
     */
    public void startClock()
    {
        timerObject.start();
    }

    /**
     * Helper method.
     * This method is called outside to stop the clock.
     */
    public void stopClock()
    {
        timerObject.stop();
    }

    /**
     * Helper method.
     * this method is called outside to restart the clock.
     */
    public void resetClock()
    {
        timerObject.restart();
        //count = 0;
        clockListener.resetCounter();
        timerObject.stop();
    }


    /**
     * Getter method.
     * @return time in seconds.
     */
    public int getTime()
    {
        return seconds;
    }

    /**
     * Getter method.
     * @return mines left to mark in integer.
     */
    public int getMines()
    {
        return Integer.parseInt(minesLabel.getText());
    }

    /**
     * Setter method.
     * @param mines integer left to mark.
     */
    public void setMines(int mines)
    {
        minesLabel.setText("" + mines);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents()
    {
        setResizable(false);


        secondsLabel = new java.awt.Label();
        minesLabel = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);

        int height = secondsLabel.getHeight();
        //Font LabelFont = new Font("sansserif", Font.BOLD, height);
        Font LabelFont = new Font("Champagne & Limousines", 0, 36);

        secondsLabel.setFont(LabelFont);
        secondsLabel.setText("0");

        //label2.setText("label2");
        minesLabel.setFont(LabelFont);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(secondsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(minesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(minesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                    .addComponent(secondsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    /**
     * Main Method.
     * Main test entry for this Specific frame.
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TimerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TimerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TimerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TimerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                /*
                Date now = new Date();
                sdf.format(now.getTime() - start.getTime());
                System.out.println(sdf);
                * */
                new InformationGUI().setVisible(true);
            }
        });
    }
}
