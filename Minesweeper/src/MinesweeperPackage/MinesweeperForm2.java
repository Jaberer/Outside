/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MinesweeperPackage;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.logging.*;
import javax.swing.*;

/**
 *
 *  Joseph Zhong
 *  Minesweeper - Java (v2.85)
 *  This program is the GUI Object for my overall Minesweeper Project
 *  Minesweeper - GUI Object
 *  1 April 2014
 *
 */


public class MinesweeperForm2 extends javax.swing.JFrame
{
    // visual stuff
    private static final int EASY_X = 500;
    private static final int EASY_Y = 500;

    private static final int MEDIUM_X = 700;
    private static final int MEDIUM_Y = 700;

    private static final int HARD_X = 1024;
    private static final int HARD_Y = 640;

    private static Dimension FrameSize;
    private static Dimension PanelSize;

    private static GameControl MainManager;
    private static MinesweeperButton[][] ButtonGrid;

    private static boolean isGridConstructed;

    /**
     * Creates new form MinesweeperGUI
     */
    public MinesweeperForm2()
    {
        isGridConstructed = false;
        initComponents();
        this.setTitle("asdf");
        JTextArea test = new JTextArea(instructions(), 5, 35);
        //jPanel1.add(test);

        StringBuilder sb = new StringBuilder(64);
        sb.append("<html>I have something to say, it's beter to burn out then to fade away.").
                        append("  This is a very long String to see if you can wrap with in").
                        append("the available space</html>");

        JLabel label = new JLabel(sb.toString());
        //label.setBounds(WIDTH/2, WIDTH/2, WIDTH, WIDTH);
        this.add(label);

        this.setVisible(true);
        this.repaint();
    }

    private String instructions()
    {
        String instructions = "\t\tWelcome to MiArcade (v0.0.2)! "
                + "\nClick on File to get started, or Help for more information."
                + "\n\n\t Keyboard Shortcuts: F2 for New Game";
        return instructions;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents()
    {


        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        javax.swing.JMenu FileMenu = new javax.swing.JMenu();
        NewGameMenu = new javax.swing.JMenu();
        EasyButton = new javax.swing.JMenuItem();
        //MediumButton = new JMenuItem();
        HardButton = new javax.swing.JMenuItem();
        QuitButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");
/*
        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
*/
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addMouseListener(new MouseAdapter()
        {
            public void mouseReleased(MouseEvent evt)
            {
                formMouseReleased(evt);
            }
        });
        addKeyListener(new KeyAdapter()
        {
            public void keyPressed(KeyEvent evt)
            {
                formKeyPressed(evt);
            }
        });

        jPanel1.addKeyListener(new KeyAdapter()
        {
            public void keyPressed(KeyEvent evt)
            {
                jPanel1KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 438, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );

        FileMenu.setText("File");
        FileMenu.addMouseListener(new MouseAdapter()
        {
            public void mouseClicked(MouseEvent evt)
            {
                FileMenuMouseClicked(evt);
            }
        });

        NewGameMenu.setText("New Game");

        EasyButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_F2, 0));
        EasyButton.setText("Easy");
        EasyButton.addMouseListener(new MouseAdapter()
        {
            public void mouseReleased(MouseEvent evt)
            {
                EasyButtonMouseReleased(evt);
            }
        });
        NewGameMenu.add(EasyButton);

        /*
        MediumButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_F3, 0));
        MediumButton.setText("Medium");
        MediumButton.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                MediumButtonMouseReleased(evt);
            }
        });
        NewGameMenu.add(MediumButton);
        */

        HardButton.setAccelerator(javax.swing.KeyStroke.getKeyStroke(KeyEvent.VK_F4, 0));
        HardButton.setText("Hard");
        HardButton.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                HardButtonMouseReleased(evt);
            }
        });
        HardButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                HardButtonActionPerformed(evt);
            }
        });
        NewGameMenu.add(HardButton);

        FileMenu.add(NewGameMenu);

        QuitButton.setText("Quit");
        QuitButton.addMouseListener(new MouseAdapter() {
            public void mouseReleased(MouseEvent evt) {
                QuitButtonMouseReleased(evt);
            }
        });
        FileMenu.add(QuitButton);

        jMenuBar1.add(FileMenu);

        jMenu2.setText("Help");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>

    /**
     * Exit method.
     *  Exits the program as does Alt+F4 or Clicking the Red X in the upper right
     *  corner.
     * @param evt User Mouse Click release.
     */
    private void QuitButtonMouseReleased(MouseEvent evt) {
        // TODO add your handling code here:
        this.dispose();
    }

    /**
     * Constructor Method.
     * Constructs the easy grid.
     * @param evt
     */

    /*
    private void EasyButtonMouseReleased(MouseEvent evt) {

    }
*/
    private void EasyButtonMouseReleased(MouseEvent evt)
    {
        if(isGridConstructed)
        {
            jPanel1.removeAll();
            constructMinesweeper("easy");
        }
        else
        {
            isGridConstructed = true;
            //jPanel1.removeAll();
            constructMinesweeper("easy");
        }
    }

    private void constructMinesweeper(String difficulty)
    {
        MainManager = new GameControl(difficulty);

        ButtonGrid = new MinesweeperButton[MainManager.getMainGrid().getLength(false)][MainManager.getMainGrid().getLength(true)];
       // produce a GUI grid

        for(int y = 0; y < MainManager.getMainGrid().getLength(false); y++)
        {
            for(int x = 0; x < MainManager.getMainGrid().getLength(true); x++)
            {
                ButtonGrid[y][x] = new MinesweeperButton(" ");
                MouseListener MouseClick;

                MouseClick =  new MouseListener()
                {
                    @Override
                    public void mouseClicked(MouseEvent e)
                    {
//                                throw new UnsupportedOperationException("Not supported yet.");
                        System.out.println("Click Successful");
                    }

                    @Override
                    public void mousePressed(MouseEvent e)
                    {
                        /*
                        AbstractButton abstractButton = (AbstractButton) e.getSource();
                        abstractButton.getModel().setArmed(true);
                        abstractButton.getModel().setPressed(true);
                        * */
                        System.out.println("Press");
                    }

                    @Override
                    public void mouseReleased(MouseEvent e)
                    {
                        AbstractButton abstractButton = (AbstractButton) e.getSource();
                        ArrayList<Object> MouseClickCollection = new ArrayList<>();

                        int y = 0; int x = 0;
                        outerloop:
                        for(y = 0; y < ButtonGrid.length; y++)
                        {
                            for(x = 0; x < ButtonGrid[1].length; x++)
                            {
                                if(abstractButton.equals(ButtonGrid[y][x]))
                                {
                                    break outerloop;
                                    // coordinates saved
                                }
                            }
                        }
                        System.out.println(y + " " + x);

                        // prepare special icons
                        ImageIcon FlagIcon;
                        FlagIcon = new ImageIcon("C://Users/Joseph/Downloads/GitHub/Outside/2013/Minesweeper/src/Images/FlagImage.png");
                        ImageIcon MineIcon;
                        MineIcon = new ImageIcon("C://Users/Joseph/Downloads/GitHub/Outside/2013/Minesweeper/src/Images/MineImage.png");

                        // prepare resize
                        Image MineImage = MineIcon.getImage(); // transform it
                        Image FlagImage = FlagIcon.getImage();

                        int maxSize = Math.max(abstractButton.getHeight(), abstractButton.getWidth()) / 2;

                        Image rescaledImage;
                        ImageIcon imageIcon;



                        MouseClickCollection.add(e.getButton());
                        System.out.println(Arrays.toString(MouseClickCollection.toArray()));

                        int bothMask = MouseEvent.BUTTON1_DOWN_MASK | MouseEvent.BUTTON3_DOWN_MASK;
                        if ((e.getModifiersEx() & bothMask) == bothMask)
                        {
                            System.out.println("Both down");
                        }

                        // right click flag
                        if(SwingUtilities.isRightMouseButton(e)
                                && !SwingUtilities.isLeftMouseButton(e)
                                && !abstractButton.isSelected())
                        {
                            if(!ButtonGrid[y][x].getIsFlagged())
                            {
                                rescaledImage = FlagImage.getScaledInstance(maxSize, maxSize, Image.SCALE_SMOOTH);
                                imageIcon = new ImageIcon(rescaledImage);
                                JLabel iconLabel = new JLabel(imageIcon);
                                abstractButton.add(iconLabel);
                                ButtonGrid[y][x].setIsFlagged(true);
                                MainManager.getMainGrid().markBox(y, x);
                                resetFont("", y, x);
                            }
                            else
                            {
                                ButtonGrid[y][x].setIsFlagged(false);
                                MainManager.getMainGrid().markBox(y, x);
                                ButtonGrid[y][x].removeAll();
                                resetFont("", y, x);
                            }
                            /*
                            if(abstractButton.isEnabled())
                            {
                                rescaledImage = FlagImage.getScaledInstance(maxSize, maxSize, Image.SCALE_SMOOTH);
                                imageIcon = new ImageIcon(rescaledImage);
                                JLabel iconLabel = new JLabel(imageIcon);
                                abstractButton.add(iconLabel);

                                abstractButton.setEnabled(false);
                            }
                            else if(!abstractButton.isEnabled())
                            {
                                abstractButton.setEnabled(true);
                                abstractButton.removeAll();
                            }
                            * */

                        }
                        else if(SwingUtilities.isLeftMouseButton(e)
                                && !SwingUtilities.isRightMouseButton(e)
                                && !ButtonGrid[y][x].getIsFlagged())
                        {
                            // leftClick
                            MainManager.getMainGrid().selectBox(y, x);
                            String displayText = MainManager.getMainGrid().getDisplay(y, x);
                            if(displayText.equals("9"))
                            {
                                rescaledImage = MineImage.getScaledInstance(maxSize, maxSize, Image.SCALE_SMOOTH); // scale it the smooth way
                                imageIcon = new ImageIcon(rescaledImage);  // transform it back

                                JLabel test1 = new JLabel(imageIcon);

                                abstractButton.setBackground(Color.red);
                                abstractButton.add(test1);
                            }
                            abstractButton.setText(displayText);

                            resetFont(displayText, y, x);

                                 //break; // apparently that made all the differnece lol

                        }
                        else
                        {
                            abstractButton.setSelected(false);
                        }

                        for(int r = 0; r < ButtonGrid.length; r++)
                        {
                            for(int c = 0; c < ButtonGrid[1].length; c++)
                            {
                                // check for zeros
                                String displayText = MainManager.getMainGrid().getDisplay(r, c);
                                if(!(displayText.equals("_"))
                                        && !displayText.equals("!"))
                                {
                                    ButtonGrid[r][c].setSelected(true);
                                    ButtonGrid[r][c].setText(displayText);

                                    resetFont(displayText, r, c);
                                }
                            }
                        }
                    }

                    @Override
                    public void mouseEntered(MouseEvent e)
                    {
                        //throw new UnsupportedOperationException("Not supported yet.");
                        AbstractButton abstractButton = (AbstractButton) e.getSource();
                        abstractButton.getModel().setArmed(true);
                    }

                    @Override
                    public void mouseExited(MouseEvent e)
                    {
                        //throw new UnsupportedOperationException("Not supported yet.");
                        AbstractButton abstractButton = (AbstractButton) e.getSource();
                        abstractButton.getModel().setArmed(false);
                    }
                };

                ButtonGrid[y][x].addMouseListener(MouseClick);
                jPanel1.add(ButtonGrid[y][x]);

                System.out.println(y + ", " + x); // debug
            }
        } // end for loop

        // sets panel and frame
        this.setResizable(false); // MUST PUT THIS LINE BEFORE BOUNDS AND SIZES ARE SET

        FrameSize = new Dimension(EASY_X, EASY_Y);
        PanelSize = new Dimension(EASY_X, EASY_Y);

        this.setSize(FrameSize);
        this.setLocation(300, 100);

        jPanel1.setPreferredSize(PanelSize);

        jPanel1.setLayout(new GridLayout(MainManager.getMainGrid().getLength(true), MainManager.getMainGrid().getLength(false)));
        this.setVisible(true);

        this.pack();
    }

    private void leftClick(MouseEvent e)
    {

    }

     private void resetFont(String displayNumber, int _r, int _c)
     {
         int height = ButtonGrid[_r][_c].getHeight() / 2;
         Font numberFont = (new Font("sansserif", Font.BOLD, height));

         ButtonGrid[_r][_c].setFont(numberFont);

         if(displayNumber.equals("9"))
         {
             ButtonGrid[_r][_c].setForeground(new Color(255, 0, 0)); // red
         }
         else
         {
             ButtonGrid[_r][_c].setForeground(new Color(0, 130, 200)); // 0,130,200 is a pretty and solid cyan blue
         }


         ButtonGrid[_r][_c].repaint();
     }

    private void MediumButtonMouseReleased(MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void HardButtonActionPerformed(ActionEvent evt) {
        // TODO add your handling code here:


    }

    private void HardButtonMouseReleased(MouseEvent evt) {
        // TODO add your handling code here:
        MainManager = new GameControl("hard");
    }

    private void formKeyPressed(KeyEvent evt) {
        // TODO add your handling code here:
        //checkF2Key(evt);
        //checkTestCMD(evt);
    }

    private void formMouseReleased(MouseEvent evt) {
        // TODO add your handling code here:
        for(int r = 0; r < ButtonGrid.length; r++)
        {
            for(int c = 0; c < ButtonGrid[1].length; c++)
            {
                {
                    System.out.println(evt.getX() + " " + evt.getY());
                }
            }
        }


    }

    private void jPanel1KeyPressed(KeyEvent evt) {
        // TODO add your handling code here:
        //checkF2Key(evt);
        //checkTestCMD(evt);
    }

    private void FileMenuMouseClicked(MouseEvent evt) {
        // TODO add your handling code here:

        System.out.println("FileMenu Clicked");
    }

    private void checkF2Key(KeyEvent evt)
    {
        if(evt.getKeyCode() == 113)
        {
            System.out.println(evt.getKeyCode());
            //EasyButtonMouseReleased(null);
            FileMenuMouseClicked(null);
        }
    }

    private void checkTestCMD(KeyEvent evt)
    {
        if(evt.getKeyCode() == 114)
        {
            System.out.println(evt.getKeyCode());
            jPanel1.removeAll();
            constructMinesweeper("test");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        // Set Nimbus and Feel
        try
        {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            Logger.getLogger(MinesweeperForm2.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            Logger.getLogger(MinesweeperForm2.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            Logger.getLogger(MinesweeperForm2.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (UnsupportedLookAndFeelException ex)
        {
            Logger.getLogger(MinesweeperForm2.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new MinesweeperGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify
    private JMenuItem EasyButton;
    private JMenuItem HardButton;
    private MenuItem MediumButton;
    private JMenu NewGameMenu;
    private JMenuItem QuitButton;
    private JFrame jFrame1;
    private JMenu jMenu2;
    private JMenu jMenu3;
    private JMenu jMenu4;
    private JMenuBar jMenuBar1;
    private JPanel jPanel1;
    // End of variables declaration
}
